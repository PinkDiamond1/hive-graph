# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Account implements BaseAccount {
  account_number: Int!
  address: String!
  coins: [Coin!]!
  public_key: PublicKeyUnion
  sequence: Int!
}

type AggregateExchangeRatePrevote {
  hash: String!
  submit_block: Int!
  voter: String!
}

type AggregateExchangeRateVote {
  exchange_rate_tuples: [Coin!]!
  voter: String!
}

type Auth {
  accountInfo(address: String!): Account!
}

type AuthorizationGrant {
  authorization: AuthorizationUnion!
  expiration: String!
}

union AuthorizationUnion = GenericAuthorization | SendAuthorization

type Bank {
  balance(address: String!): [Coin!]!
}

interface BaseAccount {
  account_number: Int!
  address: String!
  coins: [Coin!]!
  public_key: PublicKeyUnion
  sequence: Int!
}

type Coin {
  amount: String!
  denom: Denom!
}

input CoinInput {
  amount: String!
  denom: Denom!
}

type CommunityPoolSpendContent implements ProposalContent {
  amount: [Coin!]!
  description: String!
  recipient: String!
  title: String!
}

enum Denom {
  uaud
  ucad
  uchf
  ucny
  udkk
  ueur
  ugbp
  uhkd
  uinr
  ujpy
  ukrw
  uluna
  umnt
  unok
  usdr
  usek
  usgd
  uthb
  uusd
}

type Deposit {
  amount: [Coin!]!
  depositor: String!
  proposal_id: Float!
}

type DepositParams {
  max_deposit_period: Int!
  min_deposit: [Coin!]!
}

type Distribution {
  communityPool: [Coin!]!
  parameters: DistributionParams!
  rewards(delegator: String!): Rewards!
  validatorRewards(validator: String!): ValidatorRewards!
  withdrawAddress(delegator: String!): String!
}

type DistributionParams {
  base_proposer_reward: String
  bonus_proposer_reward: String
  community_tax: String
  withdraw_addr_enabled: Boolean
}

type ExchangeRatePrevote {
  denom: Denom
  hash: String
  submit_block: Int
  voter: String
}

type ExchangeRateVote {
  denom: Denom
  exchange_rate: String!
  voter: String
}

type GenericAuthorization {
  grant_msg_type: String!
}

type Gov {
  depositParameters: DepositParams!
  deposits(proposalId: Float!): [Deposit!]!
  parameters: GovParams!
  proposal(proposalId: Float!): Proposal!
  proposals: [Proposal!]!
  proposer(proposalId: Float!): String!
  tally(proposalId: Float!): Tally!
  tallyParameters: TallyParams!
  votes(proposalId: Float!): [Vote!]!
  votingParameters: VotingParams!
}

type GovParams {
  deposit_params: DepositParams
  tally_params: TallyParams
  voting_params: VotingParams
}

type Market {
  parameters: MarketParams!
  swapRate(askDenom: Denom!, offerCoin: CoinInput!): Coin!
  terraPoolDelta: String!
}

type MarketParams {
  base_pool: String
  min_stability_spread: String
  pool_recovery_period: Int
}

type Mint {
  annualProvisions: String!
  inflation: String!
  parameters: MintingParams!
}

type MintingParams {
  blocks_per_year: Int
  goal_bonded: String
  inflation_max: String
  inflation_min: String
  inflation_rate_change: String
  mint_denom: Denom
}

type Msgauth {
  grants(grantee: String!, granter: String!, msgType: String): [AuthorizationGrant!]!
}

type MultisigPublicKey {
  pubkeys: [PublicKey!]!
  threshold: String!
  type: String!
}

type Oracle {
  activeDenoms: [Denom!]!
  aggregatePrevote(validator: String!): AggregateExchangeRatePrevote!
  aggregateVote(validator: String!): AggregateExchangeRateVote!
  exchangeRate(denom: String!): Coin
  exchangeRates: [Coin!]!
  feederAddress(validator: String!): String!
  misses(validator: String!): Int!
  parameters: OracleParams!
  prevotes(denom: String, validator: String): [ExchangeRatePrevote!]!
  votes(denom: String, validator: String): [ExchangeRateVote!]!
}

type OracleParams {
  min_valid_per_window: String
  reward_band: String
  reward_distribution_window: Int
  slash_fraction: String
  slash_window: Int
  vote_period: Int
  vote_threshold: String
  whitelist: [OracleWhitelist!]
}

type OracleWhitelist {
  name: String!
  tobin_tax: String!
}

type ParameterChangeContent implements ProposalContent {
  changes: ParameterChangesUnion
  description: String!
  title: String!
}

union ParameterChangesUnion = DistributionParams | GovParams | MarketParams | MintingParams | OracleParams | SlashingParams | StakingChanges | TreasuryChanges | WasmParamChanges

type PolicyConstraints {
  cap: Coin!
  change_max: String!
  rate_max: String!
  rate_min: String!
}

type Proposal {
  content: ProposalContentUnion!
  deposit_end_time: String!
  final_tally_result: Tally!
  id: ID!
  proposal_status: ProposalStatus!
  submit_time: String!
  total_deposit: [Coin!]!
  voting_end_time: String!
  voting_start_time: String!
}

interface ProposalContent {
  description: String!
  title: String!
}

union ProposalContentUnion = CommunityPoolSpendContent | ParameterChangeContent | RewardWeightUpdateContent | TaxRateUpdateContent | TextContent

enum ProposalStatus {
  DepositPeriod
  Failed
  Passed
  Rejected
  VotingPeriod
}

type PublicKey {
  type: String!
  value: String!
}

union PublicKeyUnion = MultisigPublicKey | PublicKey

type Query {
  auth: Auth!
  bank: Bank!
  distribution: Distribution!
  gov: Gov!
  market: Market!
  mint: Mint!
  msgauth: Msgauth!
  oracle: Oracle!
  ping: String!
  slashing: Slashing!
}

type RewardItem {
  reward: [Coin!]!
  validator_address: String!
}

type RewardWeightUpdateContent implements ProposalContent {
  description: String!
  reward_weight: String!
  title: String!
}

type Rewards {
  rewards: [RewardItem!]!
  total: [Coin!]!
}

type ScheduleEntry {
  end_time: String!
  ratio: String!
  start_time: String!
}

type SendAuthorization {
  spend_limit: [Coin!]!
}

type SigningInfo {
  address: String!
  index_offset: Int!
  jailed_until: String!
  missed_blocks_counter: Int!
  start_height: Int!
  tombstoned: Boolean!
}

type Slashing {
  parameters: SlashingParams!
  signingInfos(valConsPubKey: String): [SigningInfo!]!
}

type SlashingParams {
  downtime_jail_duration: String
  max_evidence_age: Int
  min_signed_per_window: String
  signed_blocks_window: Int
  slash_fraction_double_sign: String
  slash_fraction_downtime: String
}

type StakingChanges {
  bond_denom: String
  key_max_entries: Int
  max_validators: Int
  unbonding_time: Int
}

type Tally {
  abstain: Int!
  no: Int!
  no_with_veto: Int!
  yes: Int!
}

type TallyParams {
  quorum: String!
  threshold: String!
  veto: String!
}

type TaxRateUpdateContent implements ProposalContent {
  description: String!
  tax_rate: String!
  title: String!
}

type TextContent implements ProposalContent {
  description: String!
  title: String!
}

type TreasuryChanges {
  mining_increment: String
  reward_policy: PolicyConstraints
  seigniorage_burden_target: String
  tax_policy: PolicyConstraints
  window_long: Int
  window_probation: Int
  window_short: Int
}

type ValidatorRewards {
  self_bond_rewards: [Coin!]!
  val_commission: [Coin!]!
}

type VestingSchedule {
  denom: String!
  schedules: [ScheduleEntry!]!
}

type Vote {
  option: VoteOption!
  proposal_id: Float!
  voter: String!
}

enum VoteOption {
  Abstain
  Empty
  No
  NoWithVeto
  Yes
}

type VotingParams {
  voting_period: Int!
}

type WasmParamChanges {
  max_contract_gas: Int
  max_contract_msg_size: Int
  max_contract_size: Int
}
